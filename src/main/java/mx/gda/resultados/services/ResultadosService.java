package mx.gda.resultados.services;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import mx.gda.resultados.objects.Orden;
import mx.gda.resultados.objects.ReporteAmazon;
import mx.gda.resultados.objects.ResultadoJasperAmazon;
import mx.gda.resultados.objects.TordenSucursal;
import mx.gda.resultados.utilities.Util_Base64;
import net.lingala.zip4j.ZipFile;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import wsclient.azteca.IwsReporte;
import wsclient.azteca.RespReporte;
import wsclient.azteca.WsLabCore;
import wsclient.fuji.ReportWebService;
import wsclient.fuji.ReportWebServiceSoap;
import wsclient.fuji.Response;
import wsclient.patcore.IwsPatCore;
import wsclient.patcore.Service1;


@Service
public class ResultadosService {
	Logger logger = LoggerFactory.getLogger(mx.gda.resultados.services.ResultadosService.class);

	String PDF_ERROR = (""
			+ "")
					.intern();
	Integer TIME_OUT_SECONDS = Integer.valueOf(120);
	Integer NO_INTENTOS = Integer.valueOf(4);
	//Long KEVENTO_AMAZON=new Long(349); //DEV
	Long KEVENTO_AMAZON=new Long(1162); //Prod
	Util_Base64 util_Base64= new Util_Base64();

	@PersistenceContext
	private EntityManager entityManager;

	/* Regresa el pdf de Error */
	public byte[] getPDF_ERROR() {
		return Base64.getDecoder().decode(this.PDF_ERROR);
	}

	/* Método para obtener el PDF de resultados (Primero consulta Azteza y despues Swiss en caso de no encontrar resultados) */
	public byte[] getResultado(String orden, Integer opcion) throws Exception {
		byte[] salida = null;
		Boolean logo = Boolean.valueOf(false);
		if (opcion.intValue() >= 1)
			logo = Boolean.valueOf(true);
		this.logger.debug("Entra al mgetResultado [{},{}]", orden, opcion);
		RespReporte tmp = consulta_WsAzteca(orden, logo);
		this.logger.debug("Consulta WS_Azteca");
		if (tmp.isGenerado().booleanValue()) {
			salida = Base64.getDecoder().decode(tmp.getArchivoBase64().getValue());
		} else {
			wsclient.swiss.RespReporte tmpSwiss = consulta_WsSwiss(orden, logo);
			this.logger.debug("Consulta WS_Swiss");
			if (tmpSwiss.isGenerado().booleanValue())
				salida = Base64.getDecoder().decode(tmpSwiss.getArchivoBase64().getValue());
		}
		return salida;
	}

	/* Método para obtener el PDF de resultados de labcore Azteca */
	public byte[] getResultado_WsAzteca(String orden, Integer opcion) throws Exception {
		byte[] salida = null;
		Boolean logo =false;
		logger.info(" Se consume método:  getResultado_WsAzteca ");
		logger.debug("Orden  : {}",orden);
		logger.debug("Opcion : {}",opcion);
		if (opcion.intValue() >= 1) {
			logo=true;
		}			
		RespReporte tmp = consulta_WsAzteca(orden, logo);
		logger.debug("Mensaje Respuesta Azteca (generado): {}", tmp.isGenerado().booleanValue());
		if (tmp.isGenerado().booleanValue()) {			
			salida = Base64.getDecoder().decode(tmp.getArchivoBase64().getValue());
		} else {
			logger.info("Mensaje Respuesta Azteca (mensaje): {}", tmp.getMensaje().getValue());
			salida = Base64.getDecoder().decode(this.PDF_ERROR);
		}
		return salida;
	}

	/* Método para obtener el PDF de resultados de labcore Swiss */
	public byte[] getResultado_WsSwiss(String orden, Integer opcion) throws Exception {
		byte[] salida = null;
		Boolean logo=false;
		logger.info(" Se consume método:  getResultado_WsSwiss ");
		logger.debug("Orden  : {}",orden);
		logger.debug("Opcion : {}",opcion);
		if (opcion.intValue() >= 1) {
			logo=true;
		}	
		wsclient.swiss.RespReporte tmp = consulta_WsSwiss(orden, logo);
		logger.info("Mensaje Respuesta Swiss (generado): {}", tmp.isGenerado().booleanValue());
		if (tmp.isGenerado().booleanValue()) {			
			salida = Base64.getDecoder().decode(tmp.getArchivoBase64().getValue());
		} else {
			logger.info("Mensaje Respuesta Swiss (mensaje): {}", tmp.getMensaje().getValue());
			salida = Base64.getDecoder().decode(this.PDF_ERROR);
		}
		return salida;
	}

	/* Método para obtener el PDF de resultados de labcore Nova */
	public byte[] getResultado_WsNova(String orden, Integer opcion) throws Exception {
		byte[] salida = null;
		logger.info(" Se consume método:  getResultado_WsNova ");
		logger.debug("Orden  : {}",orden);
		logger.debug("Opcion : {}",opcion);
		Boolean logo=false;
		if (opcion.intValue() >= 1) {
			logo=true;
		}
		wsclient.nova.RespReporte tmp = consulta_WsNova(orden, logo);
		logger.info("Mensaje Respuesta Nova (generado): {}", tmp.isGenerado().booleanValue());
		if (tmp.isGenerado().booleanValue()) {
			salida = Base64.getDecoder().decode(tmp.getArchivoBase64().getValue());
		} else {
			logger.info("Mensaje Respuesta Nova (mensaje): {}", tmp.getMensaje().getValue());
			salida = Base64.getDecoder().decode(this.PDF_ERROR);
		}
		return salida;
	}

	/* Método para obtener el PDF  en base64 de resultados de labcore Azteca */
	public String getResBase64_WsAzteca(String orden, Integer opcion) throws Exception {
		String salida= null;
		Boolean logo=false;
		logger.info(" Se consume método:  getResBase64_WsAzteca ");
		logger.debug("Orden  : {}",orden);
		logger.debug("Opcion : {}",opcion);
		if (opcion.intValue() >= 1) {
			logo =true;
		}		
		RespReporte tmp = consulta_WsAzteca(orden, logo);
		logger.debug("Mensaje Respuesta Azteca (generado): {}", tmp.isGenerado().booleanValue());
		if (tmp.isGenerado().booleanValue()) {
			salida = tmp.getArchivoBase64().getValue();
		}else {
			logger.error("Sin datos [getResBase64_WsAzteca]: Validar el número de orden y/o que los resultados esten liberados");
			throw new ResponseStatusException(HttpStatus.NO_CONTENT,"Validar el número de orden y/o que los resultados esten liberados");
		}
		return salida;
	}

	/* Método para obtener el PDF  en base64 de resultados de labcore Swiss */
	public String getResBase64_WsSwiss(String orden, Integer opcion) throws Exception {
		String salida = null;
		Boolean logo=false;
		logger.info(" Se consume método:  getResBase64_WsAzteca ");
		logger.debug("Orden  : {}",orden);
		logger.debug("Opcion : {}",opcion);
		if (opcion.intValue() >= 1) {
			logo=true;
		}
		wsclient.swiss.RespReporte tmp = consulta_WsSwiss(orden, logo);
		logger.debug("Mensaje Respuesta Swiss (generado): {}", tmp.isGenerado().booleanValue());
		if (tmp.isGenerado().booleanValue()) {
			salida = tmp.getArchivoBase64().getValue();
		}else {
			logger.error("Sin datos [getResBase64_WsSwiss]: Validar el número de orden y/o que los resultados esten liberados");
			throw new ResponseStatusException(HttpStatus.NO_CONTENT,"Validar el número de orden y/o que los resultados esten liberados");
		}
		return salida;
	}
	
	/* Método para obtener el PDF  en base64 de resultados de labcore Nova */
	public String getResBase64_WsNova(String orden, Integer opcion) throws Exception {
		String salida = null;
		Boolean logo=false;
		logger.info(" Se consume método:  getResBase64_WsNova ");
		logger.debug("Orden  : {}",orden);
		logger.debug("Opcion : {}",opcion);
		if (opcion.intValue() >= 1) {
			logo=true;
		}
		wsclient.nova.RespReporte tmp = consulta_WsNova(orden, logo);
		logger.debug("Mensaje Respuesta Nova (generado): {}", tmp.isGenerado().booleanValue());
		if (tmp.isGenerado().booleanValue()) {
			salida = tmp.getArchivoBase64().getValue();
		}else {
			logger.error("Sin datos [getResBase64_WsNova]: Validar el número de orden y/o que los resultados esten liberados");
			throw new ResponseStatusException(HttpStatus.NO_CONTENT,"Validar el número de orden y/o que los resultados esten liberados");
		}
		return salida;
	}

	/* Método para regresar en zip los resultados de un evento */
	public byte[] getResultadosByEvento(Long kevento, Integer opcion) throws Exception {
		List<Orden> ordenes = null;
		byte[] tmp = null;
		byte[] salida = null;
		Path path = null;
		logger.info(" Se consume método:  getResBase64_WsNova ");
		logger.debug("kevento : {}",kevento);
		logger.debug("Opcion  : {}",opcion);
		ordenes = getOrdenesByEvento(kevento);
		if (ordenes != null && ordenes.size() >= 1) {
			String tmpdir = System.getProperty("java.io.tmpdir");
			path = Paths.get(tmpdir, new String[0]);
			File tmpFile = path.resolve(generaNombreCarpeta()).toFile();
			if (!tmpFile.mkdir()) {
				logger.error("[getResultadosByEvento] Error al generar la carpeta temporal");
				throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
						"Error al generar los archivos temporales");
			}
			logger.debug("[getResultadosByEvento] Se crea cartpeta en {}", tmpFile.getAbsolutePath());
			for (Orden o : ordenes) {
				try {
					tmp = getResultado(o.getOrden(), opcion);
					if (tmp != null)
						createPDF(tmp, o.getNombrePx(), tmpFile.toPath());
				} catch (Exception e) {
					logger.error("[getResultadosByEvento] Error al consultar la orden {}", o);
					e.printStackTrace();
				}
			}
			salida = generaZip(tmpFile.toPath(), kevento.toString());
		} else {
			logger.error("Sin datos [getResultadosByEvento]: No se encontraron ordenes con resultados");
			throw new ResponseStatusException(HttpStatus.NO_CONTENT,"No se encontraron ordenes con resultados");
		}
		return salida;
	}

	/* Método para obtener el PDF de resultados 
	 * 1) Filtra por marca y estatus
	 * 2) Consulta los servicios de Patcore & Fuji si la orden contiene estudios de estos departamentos 
	 * 3) Consulta los diferentes servicios 
	 * 4) Fusiona todos los resultados en un solo PDF
	*/
	public String getResultado(Long kordensucursal, Integer opcion) {
    String salida = null;
    List<String> tmpResultados = null;
    logger.info(" Se consume método:  getResultado ");
	logger.debug("kordensucursal : {}",kordensucursal);
	logger.debug("Opcion         : {}",opcion);
    TordenSucursal tordenSucursal = consultaOrden(kordensucursal);
    if (tordenSucursal != null) {
      if (tordenSucursal.getCestadoRegistro().longValue() != 17L) {
        if (tordenSucursal.getCmarca().equals(Integer.valueOf(6)) || tordenSucursal.getCmarca().equals(Integer.valueOf(14))) {
          logger.error("Error en getResultado: Marca no operativa {}, favor de validar la información", tordenSucursal.getCmarca());
          throw new ResponseStatusException(HttpStatus.PRECONDITION_FAILED, "Marca no operativa, favor de validar la información");
        } 
        if (tordenSucursal.getCmarca().equals(Integer.valueOf(5))) {
          tmpResultados = getResultadosMarcaSwiss(tordenSucursal, opcion);
        } else if (tordenSucursal.getCmarca().equals(Integer.valueOf(15))) {
          tmpResultados = getResultadoMarcaLiacsa(tordenSucursal, opcion);
        } else if (tordenSucursal.getCmarca().equals(Integer.valueOf(4)) || tordenSucursal.getCmarca().equals(Integer.valueOf(7)) || tordenSucursal.getCmarca().equals(Integer.valueOf(1)) || tordenSucursal.getCmarca().equals(Integer.valueOf(2)) || tordenSucursal.getCmarca().equals(Integer.valueOf(3))) {
          tmpResultados = getResultadosMarcasCDMX(tordenSucursal, opcion);
        } else {
          logger.error("Error en getResultado: Sin reglas definidas para consulta de resultados para la marca {}", tordenSucursal.getCmarca());
          throw new ResponseStatusException(HttpStatus.PRECONDITION_FAILED, "Sin reglas definidas para consulta de resultados para esta marca");
        } 
      } else {
        logger.error("Error en getResultado: Orden cancelada");
        throw new ResponseStatusException(HttpStatus.PRECONDITION_FAILED, "Orden cancelada");
      } 
    } else {
      logger.error("Error en getResultado: kordensucursal no encontrada");
      throw new ResponseStatusException(HttpStatus.NO_CONTENT, " La orden  no existe ");
    } 
    logger.debug(">>> No. de PDF's {}", Integer.valueOf(tmpResultados.size()));
    salida = combinePDFs(tmpResultados);
    return salida;
  }

	/* Método para obtener el/los PDF(s)  en base64 de resultados de Fuji */
	public List<String> getResBase64_WsFuji_PDF(Integer cmarca, Long csucursal, List<Long> kmuestrassucursal) {
		List<String> salida = new ArrayList<>();
		int i = 1;
		for (Long kmuestrasucursal : kmuestrassucursal) {
			this.logger.debug("Consulta de Fuji-PDF: kmuestrasucursal {}", kmuestrassucursal);
			while (i < this.NO_INTENTOS.intValue()) {
				this.logger.debug("Consulta de WsFuji-PDF, intento: {}", Integer.valueOf(i));
				try {
					Response tmpFujiResponse = consulta_WsFuji_PDF(cmarca, csucursal, kmuestrasucursal);
					if (tmpFujiResponse.isSuccess()) {
						salida.add(Base64.getEncoder().encodeToString(tmpFujiResponse.getReporte()));
						break;
					}
					if (tmpFujiResponse.getMessage().equals("No fue posible encontrar el estudio."))
						break;
				} catch (Exception e) {
					this.logger.error(e.getMessage());
				}
				i++;
			}
		}
		return salida;
	}

	/* Método para obtener el PDF  en base64 de resultados de Patcore */
	public String getResBase64_WsPatcore(String orden, Integer opcion) throws Exception {
		String salida = null;
		Boolean logo = Boolean.valueOf(false);
		if (opcion.intValue() >= 1)
			logo = Boolean.valueOf(true);
		this.logger.debug("Entra al mgetResultado_WsSwiss [{},{}]", orden, opcion);
		wsclient.patcore.RespReporte tmp = consulta_WsPatcore(orden, logo);
		if (tmp.isGenerado().booleanValue())
			salida = tmp.getArchivoBase64().getValue();
		return salida;
	}

	/* Método para combinar los PDF's (cadenas en base64) */
	private String combinePDFs(List<String> resultados) {
		String salida = null;
		PDDocument mergedPDF=null;
		logger.info(" Se consume método:  combinePDFs ");
		try {
			if (resultados != null) {
				if (resultados.size() > 1) {
					//PDDocument mergedPDF = new PDDocument();
					mergedPDF = new PDDocument();
					PDFMergerUtility ut = new PDFMergerUtility();
					byte[] tmp_document = null;
					for (String resultado : resultados) {
						tmp_document = Base64.getDecoder().decode(resultado);
						ut.appendDocument(mergedPDF, PDDocument.load(tmp_document));
					}
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					mergedPDF.save(baos);
					salida = Base64.getEncoder().encodeToString(baos.toByteArray());
					
				} else {
					salida = resultados.get(0);
				}
			}
		} catch (Exception e) {
			logger.error("Error en mcombinePDFs : {}", e.getMessage());
		}finally {
			if(mergedPDF!=null) {
				try {
					mergedPDF.close();
				} catch (IOException e) {
					this.logger.error(e.getMessage());
				}
			}
		}
		return salida;
	}

	/* Método para consultar los resultados de las ordenes de la marca 5-Swiss  */
	private List<String> getResultadosMarcaSwiss(TordenSucursal tordenSucursal, Integer opcion) {
		List<String> salida = new ArrayList<>();
		List<String> resultados_fuji = new ArrayList<>();
		Boolean logo = Boolean.valueOf(false);
		Integer fuji = null;
		int i = 1;
		if (opcion.intValue() >= 1)
			logo = Boolean.valueOf(true);
		this.logger.debug("Entra al mgetResultado_WsSwiss [{},{}]", tordenSucursal.getClaveLabcore(), opcion);
		while (i < this.NO_INTENTOS.intValue()) {
			this.logger.debug("Consulta de WsSwiss, intento: {}", Integer.valueOf(i));
			try {
				wsclient.swiss.RespReporte tmpSwiss = consulta_WsSwiss(tordenSucursal.getClaveLabcore(), logo);
				if (tmpSwiss.isGenerado().booleanValue()) {
					salida.add(tmpSwiss.getArchivoBase64().getValue());
					break;
				}
				if (((String) tmpSwiss.getMensaje().getValue()).equals("La orden no existe.")
						|| ((String) tmpSwiss.getMensaje().getValue()).equals("Orden sin resultados validados."))
					break;
			} catch (Exception e) {
				this.logger.error(e.getMessage());
			}
			i++;
		}
		i = 1;
		while (i < this.NO_INTENTOS.intValue()) {
			this.logger.debug("Consulta de WsNova, intento: {}", Integer.valueOf(i));
			try {
				wsclient.nova.RespReporte tmpNova = consulta_WsNova(tordenSucursal.getClaveLabcore(), logo);
				if (tmpNova.isGenerado().booleanValue()) {
					salida.add(tmpNova.getArchivoBase64().getValue());
					break;
				}
				if (((String) tmpNova.getMensaje().getValue()).equals("La orden no existe.")
						|| ((String) tmpNova.getMensaje().getValue()).equals("Orden sin resultados validados."))
					break;
			} catch (Exception e) {
				this.logger.error(e.getMessage());
			}
			i++;
		}
		i = 1;
		while (i < this.NO_INTENTOS.intValue()) {
			this.logger.debug("Consulta de WsAzteca, intento: {}", Integer.valueOf(i));
			try {
				RespReporte tmpAzteca = consulta_WsAzteca(tordenSucursal.getClaveLabcore(), logo);
				if (tmpAzteca.isGenerado().booleanValue()) {
					salida.add(tmpAzteca.getArchivoBase64().getValue());
					break;
				}
				if (((String) tmpAzteca.getMensaje().getValue()).equals("La orden no existe.")
						|| ((String) tmpAzteca.getMensaje().getValue()).equals("Orden sin resultados validados."))
					break;
			} catch (Exception e) {
				this.logger.error(e.getMessage());
			}
			i++;
		}
		fuji = contieneEstudiosDeFuji(tordenSucursal.getKordensucursal());
		if (fuji.intValue() > 0) {
			tordenSucursal.setbFuji(Boolean.valueOf(true));
			tordenSucursal.setKmuestras_fuji(getMuestrasFuji(tordenSucursal.getKordensucursal()));
			resultados_fuji = getResBase64_WsFuji_PDF(tordenSucursal.getCmarca(), tordenSucursal.getCsucursal(),
					tordenSucursal.getKmuestras_fuji());
			if (resultados_fuji.size() > 0)
				salida.addAll(resultados_fuji);
		}
		return salida;
	}

	/* Método para consultar los resultados de las ordenes de la marcas 4-Azteca,7-Jenner, 1,2,3-Olab  */
	private List<String> getResultadosMarcasCDMX(TordenSucursal tordenSucursal, Integer opcion) {
		List<String> salida = new ArrayList<>();
		List<String> resultados_fuji = new ArrayList<>();
		String tmpCombinePDF = null;
		wsclient.azteca.RespReporte tmpAzteca;
		wsclient.patcore.RespReporte tmpPatcore;
		Boolean logo = Boolean.valueOf(false);
		Integer fuji = null;
		Integer patcore = null;
		int i = 1;
		if (opcion.intValue() >= 1)
			logo = Boolean.valueOf(true);
		this.logger.debug("Entra al mgetResultadosMarcasCDMX [{},{}]", tordenSucursal.getClaveLabcore(), opcion);
		while (i < this.NO_INTENTOS.intValue()) {
			this.logger.debug("Consulta de WsAzteca, intento: {}", Integer.valueOf(i));
			try {
				tmpAzteca = consulta_WsAzteca(tordenSucursal.getClaveLabcore(), logo);
				if (tmpAzteca.isGenerado().booleanValue()) {
					salida.add(tmpAzteca.getArchivoBase64().getValue());
					break;
				}
				if (((String) tmpAzteca.getMensaje().getValue()).equals("La orden no existe.")
						|| ((String) tmpAzteca.getMensaje().getValue()).equals("Orden sin resultados validados."))
					break;
			} catch (Exception e) {
				this.logger.error(e.getMessage());
			}
			i++;
		}
		patcore = contieneEstudiosDePatcore(tordenSucursal.getKordensucursal());
		if (patcore.intValue() > 0)
			tordenSucursal.setbPatcore(Boolean.valueOf(true));
		if (tordenSucursal.getbPatcore().booleanValue()) {
			i = 1;
			while (i < this.NO_INTENTOS.intValue()) {
				this.logger.debug("Consulta de WsPatcore, intento: {}", Integer.valueOf(i));
				try {
					tmpPatcore = consulta_WsPatcore(tordenSucursal.getClaveLabcore(), logo);
					if (tmpPatcore.isGenerado().booleanValue()) {
						salida.add(tmpPatcore.getArchivoBase64().getValue());
						break;
					}
					if (((String) tmpPatcore.getMensaje().getValue()).equals("La orden no existe."))
						break;
				} catch (Exception e) {
					this.logger.error(e.getMessage());
				}
			}
			i++;
		}
		fuji = contieneEstudiosDeFuji(tordenSucursal.getKordensucursal());
		if (fuji.intValue() > 0) {
			tordenSucursal.setbFuji(Boolean.valueOf(true));
			tordenSucursal.setKmuestras_fuji(getMuestrasFuji(tordenSucursal.getKordensucursal()));
			if (tordenSucursal.getKmuestras_fuji().size() > 0)
				resultados_fuji = getResBase64_WsFuji_PDF(tordenSucursal.getCmarca(), tordenSucursal.getCsucursal(),
						tordenSucursal.getKmuestras_fuji());
			if (resultados_fuji.size() > 0)
				salida.addAll(resultados_fuji);
		}
		this.logger.debug(">>> No. de PDF's {}", Integer.valueOf(salida.size()));
		tmpCombinePDF = combinePDFs(salida);
		salida.clear();
		salida.add(tmpCombinePDF);
		return salida;
	}

	private List<String> getResultadoMarcaLiacsa(TordenSucursal tordenSucursal, Integer opcion) {
		List<String> salida = new ArrayList<>();
		List<String> resultados_fuji = new ArrayList<>();
		String tmpCombinePDF = null;
		Boolean logo = Boolean.valueOf(false);
		Integer fuji = null;
		int i = 1;
		if (opcion.intValue() >= 1)
			logo = Boolean.valueOf(true);
		this.logger.debug("Entra al mgetResultadoMarcaLiacsa [{},{}]", tordenSucursal.getClaveLabcore(), opcion);
		while (i < this.NO_INTENTOS.intValue()) {
			this.logger.debug("Consulta de WsAzteca, intento: {}", Integer.valueOf(i));
			try {
				RespReporte tmpAzteca = consulta_WsAzteca(tordenSucursal.getClaveLabcore(), logo);
				if (tmpAzteca.isGenerado().booleanValue()) {
					salida.add(tmpAzteca.getArchivoBase64().getValue());
					break;
				}
				if (((String) tmpAzteca.getMensaje().getValue()).equals("La orden no existe.")
						|| ((String) tmpAzteca.getMensaje().getValue()).equals("Orden sin resultados validados."))
					break;
			} catch (Exception e) {
				this.logger.error(e.getMessage());
			}
			i++;
		}
		fuji = contieneEstudiosDeFuji(tordenSucursal.getKordensucursal());
		if (fuji.intValue() > 0) {
			tordenSucursal.setbFuji(Boolean.valueOf(true));
			tordenSucursal.setKmuestras_fuji(getMuestrasFuji(tordenSucursal.getKordensucursal()));
			if (tordenSucursal.getKmuestras_fuji().size() > 0)
				resultados_fuji = getResBase64_WsFuji_PDF(tordenSucursal.getCmarca(), tordenSucursal.getCsucursal(),
						tordenSucursal.getKmuestras_fuji());
			if (resultados_fuji.size() > 0)
				salida.addAll(resultados_fuji);
		}
		this.logger.debug(">>> No. de PDF's {}", Integer.valueOf(salida.size()));
		tmpCombinePDF = combinePDFs(salida);
		salida.clear();
		salida.add(tmpCombinePDF);
		return salida;
	}

	/* Método para consultar el servivio de Azteca */
	private RespReporte consulta_WsAzteca(String orden, Boolean logo) throws Exception {
		RespReporte salida = null;
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
		try {
			Future<RespReporte> futureTask1 = executor.submit(() -> {
				WsLabCore service = new WsLabCore();
				IwsReporte port = service.getBasicHttpBindingIwsReporte();
				return port.getReporte(orden, logo);
			});
			salida = futureTask1.get(this.TIME_OUT_SECONDS.intValue(), TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			this.logger.error("Timeout al consultar ws Azteca ({} seconds)", this.TIME_OUT_SECONDS);
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
					"Timeout al consultar ws Azteca (" + this.TIME_OUT_SECONDS + " seconds)");
		} catch (Exception e) {
			this.logger.error("Error al consultar ws Azteca: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error al consultar ws Azteca");
		} finally {
			executor.shutdown();
		}
		return salida;
	}

	/* Método para consultar el servivio de Swiss */
	private wsclient.swiss.RespReporte consulta_WsSwiss(String orden, Boolean logo) throws Exception {
		wsclient.swiss.RespReporte salida = null;
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
		try {
			Future<wsclient.swiss.RespReporte> futureTask1 = executor.submit(() -> {
				wsclient.swiss.WsLabCore service = new wsclient.swiss.WsLabCore();
				wsclient.swiss.IwsReporte port = service.getBasicHttpBindingIwsReporte();
				return port.getReporte(orden, logo);
			});
			salida = futureTask1.get(this.TIME_OUT_SECONDS.intValue(), TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			this.logger.error("Timeout al consultar ws Azteca ({} seconds)");
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
					"Timeout al consultar ws Swiss (" + this.TIME_OUT_SECONDS + " seconds)");
		} catch (Exception e) {
			this.logger.error("Error al consultar ws Swiss: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error al consultar ws Swiss");
		} finally {
			executor.shutdown();
		}
		return salida;
	}

	/* Método para consultar el servivio de Nova*/
	private wsclient.nova.RespReporte consulta_WsNova(String orden, Boolean logo) throws Exception {
		wsclient.nova.RespReporte salida = null;
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
		try {
			Future<wsclient.nova.RespReporte> futureTask1 = executor.submit(() -> {
				wsclient.nova.WsLabCore service = new wsclient.nova.WsLabCore();
				wsclient.nova.IwsReporte port = service.getBasicHttpBindingIwsReporte();
				return port.getReporte(orden, logo);
			});
			salida = futureTask1.get(this.TIME_OUT_SECONDS.intValue(), TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			this.logger.error("Timeout al consultar ws Nova ({} seconds)");
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
					"Timeout al consultar ws Nova (" + this.TIME_OUT_SECONDS + " seconds)");
		} catch (Exception e) {
			this.logger.error("Error al consultar ws Nova: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error al consultar ws Nova");
		} finally {
			executor.shutdown();
		}
		return salida;
	}

	/* Método para consultar el servivio de Patcore*/
	private wsclient.patcore.RespReporte consulta_WsPatcore(String orden, Boolean logo) throws Exception {
		wsclient.patcore.RespReporte salida = null;
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
		try {
			Future<wsclient.patcore.RespReporte> futureTask1 = executor.submit(() -> {
				Service1 serv = new Service1();
				IwsPatCore iPatcore = serv.getBasicHttpBindingIwsPatCore();
				return iPatcore.getReporte(orden, logo);
			});
			salida = futureTask1.get(this.TIME_OUT_SECONDS.intValue(), TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			this.logger.error("Timeout al consultar ws Nova ({} seconds)");
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
					"Timeout al consultar ws Nova (" + this.TIME_OUT_SECONDS + " seconds)");
		} catch (Exception e) {
			this.logger.error("Error al consultar ws Nova: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error al consultar ws Nova");
		} finally {
			executor.shutdown();
		}
		return salida;
	}

	/* Método para consultar el servivio de Fuji , método para obtener el PDF*/
	private Response consulta_WsFuji_PDF(Integer cmarca, Long csucursal, Long kmuestrasucursal) {
		Response salida = null;
		String letra_sucursal = null;
		switch (cmarca.intValue()) {
		case 1:
			letra_sucursal = "O";
			break;
		case 2:
			letra_sucursal = "O";
			break;
		case 3:
			letra_sucursal = "O";
			break;
		case 4:
			letra_sucursal = "A";
			break;
		case 5:
			letra_sucursal = "S";
			break;
		case 15:
			letra_sucursal = "L";
			break;
		default:
			this.logger.error(" Error en consulta_WsFuji_PDF: {}- Marca no definida para generar clave", cmarca);
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
					" Error en consulta_WsFuji_PDF: " + cmarca + "- Marca no definida para generar clave");
		}
		String accessNumber = String.valueOf(letra_sucursal) + csucursal + "-" + kmuestrasucursal;
		this.logger.debug("Orden a consultar en Fuji: {}", accessNumber);
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
		try {
			Future<Response> futureTask1 = executor.submit(() -> {
				ReportWebService r = new ReportWebService();
				ReportWebServiceSoap iFuji = r.getReportWebServiceSoap();
				return iFuji.reporteBase64(accessNumber);
			});
			salida = futureTask1.get(this.TIME_OUT_SECONDS.intValue(), TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			this.logger.error("Timeout al consultar ws Fuji ({} seconds)");
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
					"Timeout al consultar ws Fuji (" + this.TIME_OUT_SECONDS + " seconds)");
		} catch (Exception e) {
			this.logger.error("Error al consultar ws Fuji (PDF): {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error al consultar ws Fuji (PDF)");
		} finally {
			executor.shutdown();
		}
		return salida;
	}

	/* Método para obtener las claves labocore de las ordenes de un evento */
	private List<Orden> getOrdenesByEvento(Long kevento) {
		List<Orden> salida = new ArrayList<>();
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	case "+
							" 		when b.ssucursal = 'BW' then RPAD(b.ssucursal, 3, '0') || b.uorden "+
							" 		else RPAD(b.ssucursal, 3, '0') || 'L' || LPAD(b.uorden, 6, '0') "+
							" 	end as claveLabcore, "+
							" 	replace(a.sapellidopaterno, ' ', '_')|| '_' || replace(a.sapellidomaterno, ' ', '_')|| '_' || replace(a.snombre, ' ', '_') as nombre "+
							" from "+
							" 	eventos.t_orden a, "+
							" 	public.t_orden_sucursal b "+
							" where "+
							" 	a.kevento =?1 "+
							" 	and a.benviadolabcore = true "+
							" 	and a.cestatus not in (6,7) "+
							" 	and b.kordensucursal = a.kordensucursal ");
			q.setParameter(1, kevento);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] r : results)
				salida.add(new Orden((String) r[0], (String) r[1]));
		} catch (Exception e) {
			this.logger.error("Error en mgetOrdenesByEvento: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}

	/* Método para crear el pdf de resultados  a base de una cadena base64 */
	private void createPDF(byte[] contenido, String nombre, Path path) {
		try {
			File tempFile = new File(path.resolve(String.valueOf(nombre) + ".pdf").toString());
			FileOutputStream fop = new FileOutputStream(tempFile);
			fop.write(contenido);
			fop.flush();
			fop.close();
			this.logger.debug("Ubicacipdf {}", tempFile.getAbsolutePath());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/* Método para comprimir la carpeta contenedora de los resultados */
	private byte[] generaZip(Path path, String evento) {
		this.logger.debug("Llega a comprimir zip con la ruta {}", path.toString());
		byte[] salida = null;
		try {
			ZipFile zip = new ZipFile(path.resolve(String.valueOf(path.toFile().getName()) + ".zip").toFile());
			this.logger.debug("Carpeta a comprimir {}", path.toString());
			zip.addFolder(path.toFile());
			this.logger.debug("el archivo zip se creo en {}", zip.getFile().getAbsolutePath());
			salida = Files.readAllBytes(zip.getFile().toPath());
			this.logger.debug("Termino compresion ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return salida;
	}

	private String generaNombreCarpeta() {
		String salida = null;
		SimpleDateFormat formatter = new SimpleDateFormat("ddMMyyyy_HHmmss");
		salida = "Resultados_" + formatter.format(new Date());
		return salida;
	}

	/* Método obtener los datos de la orden (estado, claveLabcore,csucursal,marca) */
	private TordenSucursal consultaOrden(Long kordensucursal) {
		TordenSucursal salida = null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" b.kordensucursal, "+
							"  case "+
							"   when length(b.uorden) <= 6 then RPAD(b.ssucursal, 3, '0') || 'L' || LPAD(b.uorden, 6, '0') "+
							"   else RPAD(b.ssucursal, 3, '0') || LPAD(b.uorden, 7, '0') "+
							"  end as claveLabcore, "+
							"  b.cmarca, "+
							"  b.csucursal, "+
							"  b.cestadoregistro "+
							" from "+
							" 	public.t_orden_sucursal b "+
							" where "+
							" 	b.kordensucursal=?1");
			q.setParameter(1, kordensucursal);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] r : results) {
				salida = new TordenSucursal(Long.valueOf(((BigDecimal) r[0]).longValue()), (String) r[1],
						Integer.valueOf(((BigDecimal) r[2]).intValue()), Long.valueOf(((BigDecimal) r[3]).longValue()),
						Long.valueOf(((BigDecimal) r[4]).longValue()));
			}
		} catch (Exception e) {
			this.logger.error("Error en mconsultaOrden: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}

	private Integer contieneEstudiosDeFuji(Long kordensucursal) {
		Integer salida = null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	count(a.*) "+
							" from "+
							" 	web2lablis.c_examen a, "+
							" 	web2lablis.c_departamento b "+
							" where "+
							" 	a.cexamen in ( "+
							" 	select "+
							" 		distinct (c.cexamenproceso) "+
							" 	from "+
							" 		public.t_orden_sucursal a, "+
							" 		public.t_orden_examen_sucursal b, "+
							" 		web2lablis.c_examen c "+
							" 	where "+
							" 		a.kordensucursal =?1 "+
							" 		and b.kordensucursal = a.kordensucursal "+
							" 		and c.cexamen = b.cexamen "+
							" 		and c.ulaboratoriogabinete =2 ) "+
							" 	and b.cdepartamento = a.cdepartamento "+
							" 	and b.cdepartamento!=133 ");
			q.setParameter(1, kordensucursal);
			salida = Integer.valueOf(((Number) q.getSingleResult()).intValue());
		} catch (Exception e) {
			this.logger.error("Error en mconsultaOrden: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}

	private Integer contieneEstudiosDePatcore(Long kordensucursal) {
		Integer salida = null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select"+
							" 	count(a.*)"+
							" from"+
							" 	web2lablis.c_examen a,"+
							" 	web2lablis.c_departamento b"+
							" where"+
							" 	a.cexamen in ("+
							" 	select"+
							" 		distinct (c.cexamenproceso)"+
							" 	from"+
							" 		public.t_orden_sucursal a,"+
							" 		public.t_orden_examen_sucursal b,"+
							" 		web2lablis.c_examen c"+
							" 	where"+
							" 		a.kordensucursal =?1"+
							" 		and b.kordensucursal = a.kordensucursal"+
							" 		and c.cexamen = b.cexamen )"+
							" 	and substring(a.scodigolis, 1, 3)= 'PAT'"+
							" 	and b.cdepartamento = a.cdepartamento");
			q.setParameter(1, kordensucursal);
			salida = Integer.valueOf(((Number) q.getSingleResult()).intValue());
		} catch (Exception e) {
			this.logger.error("Error en mconsultaOrden: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}

	/* Método obtener las muestras de imagen para consultar el WS_Fuji */
	private List<Long> getMuestrasFuji(Long kordensucursal) {
		List<Long> salida = new ArrayList<>();
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	c.cexamen, "+
							" 	c.sexamen, "+
							" 	c.cexamenproceso, "+
							" 	d.kmuestrasucursal "+
							" from "+
							" 	public.t_orden_sucursal a, "+
							" 	public.t_orden_examen_sucursal b, "+
							" 	web2lablis.c_examen c, "+
							" 	public.r_examen_muestra_sucursal d "+
							" where "+
							" 	a.kordensucursal =?1 "+
							" 	and b.kordensucursal = a.kordensucursal "+
							" 	and c.cexamen = b.cexamen "+
							" 	and d.kordenexamensucursal = b.kordenexamensucursal "+
							" 	and exists ( "+
							" 	select "+
							" 		f.* "+
							" 	from "+
							" 		web2lablis.c_examen e, "+
							" 		web2lablis.c_departamento f "+
							" 	where "+
							" 		e.cexamen = c.cexamenproceso "+
							" 		and e.ulaboratoriogabinete=2 "+
							" 		and f.cdepartamento = e.cdepartamento "+
							" 		and f.cdepartamento != 133 ) ");
			q.setParameter(1, kordensucursal);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] r : results) {
				Long tmp = Long.valueOf(((BigDecimal) r[3]).longValue());
				if (tmp.longValue() > 0L)
					salida.add(tmp);
			}
		} catch (Exception e) {
			this.logger.error("Error en mconsultaOrden: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}
	
	/* Método para obtener los resultados (Labcore & Reporte Amz) del evento Amzon por korden */
	public String getResultadosAmazon(Long korden,Integer opcion) {
		String salida=null;		
		String ordenLabcore;
		Integer estatusAmz=null;
		//List<String> resultados= new ArrayList<String>();
		//ReporteAmazon tmpReporte=null;
		logger.info("---- Se consume método getResultadosAmazon ----");
		logger.debug("korden       : {}",korden);
		logger.debug("opcion       : {}",opcion);
		estatusAmz=getEstatusAmz(korden);
		if(estatusAmz==null) {
			this.logger.error("Error en getResultadosAmazon: {}", "Orden inexistente o sin resultados");
			throw new ResponseStatusException(HttpStatus.NO_CONTENT, "Favor de validar el korden,Orden inexistente o sin resultados");
		}else if(estatusAmz.equals(6)) {
			/*
			tmpReporte=getDatosReporteAmazon(korden);
			salida=getReporteAmazon(tmpReporte);
			*/
			this.logger.error("Error en getResultadosAmazon: {}", "Orden inexistente o sin resultados");
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Favor de validar el korden,Orden inexistente o sin resultados");
		}else if(estatusAmz.equals(7)) {
			ordenLabcore=getOrdenLabcoreAmazon(korden);		
			if(ordenLabcore==null) {
				this.logger.error("Error en getResultadosAmazon: {}", "Orden inexistente o sin resultados");
				throw new ResponseStatusException(HttpStatus.NO_CONTENT, "Favor de validar el korden,Orden inexistente o sin resultados");
			}
			/*
			tmpReporte=getDatosReporteAmazon(korden);
			resultados.add(getReporteAmazon(tmpReporte));
			logger.info(ordenLabcore.substring(0, ordenLabcore.indexOf(":")-1));
			ordenLabcore=ordenLabcore.substring(0, ordenLabcore.indexOf(":"));
			resultados.add(getResultado(new Long(ordenLabcore), opcion));
			salida=combinePDFs(resultados);
			*/
			ordenLabcore=ordenLabcore.substring(0, ordenLabcore.indexOf(":"));
			salida=getResultado(new Long(ordenLabcore), opcion);
		}else {
			this.logger.error("Error en getResultadosAmazon: {}", "Orden pendiente de registro de resultados");
			throw new ResponseStatusException(HttpStatus.NO_CONTENT, "Favor de validar,Orden pendiente de registro de resultados");
		}		
		return salida;		
	}
	
	public String getResultadosAmazon2(Long korden) {
		String salida=null;	
		ResultadoJasperAmazon tmp=null;
		List<String> resultados= new ArrayList<String>();
		logger.info("---- Se consume método getResultadosAmazon2 ----");
		logger.debug("korden       : {}",korden);
		tmp=getDatosJasperAmazon(korden);
		if(tmp==null) {
			this.logger.error("Error en getResultadosAmazon2: {}", "Orden inexistente o sin resultados");
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Favor de validar el korden,Orden inexistente o sin resultados");
		}
		if(tmp.getFecha_orina()!=null) {
			resultados.add(getReporteOrinaAmazon(tmp));
			resultados.add(getReporteSalivaAmazon(tmp));
			salida=combinePDFs(resultados);
		}else {
			salida=getReporteSalivaAmazon(tmp);
		}
		return salida;
	}
	
	/* Método para descargar el certificado de Amzon por # korden */
	public String getCertificadoAmazon(Long korden) {
		String salida=null;
		Integer estatusAmz=null;
		ReporteAmazon tmpReporte=null;
		logger.info("---- Se consume método getCertificadoAmazon ----");
		logger.debug("korden       : {}",korden);
		estatusAmz=getEstatusAmz(korden);
		if(estatusAmz==null) {
			this.logger.error("Error en getResultadosAmazon: {}", "Orden inexistente o sin resultados");
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Favor de validar el korden, Orden inexistente");
		}else if(estatusAmz.equals(6) || estatusAmz.equals(7)) {
			tmpReporte=getDatosReporteAmazon(korden);
			salida=getReporteAmazon(tmpReporte);
		}else{
			this.logger.error("Error en getResultadosAmazon: {}", "Orden pendiente de registro de resultados");
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Favor de validar, Orden pendiente de registro de resultados");
		}
		return salida;
	}
	
	/* Método para obteber la clave Labcore de una orden del Evento de Amzaon */
	public String getOrdenLabcoreAmazon(Long korden) {
		String salida=null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	a.kordensucursal, "+
							" 	case "+
							" 		when length(b.uorden) <= 6 then RPAD(b.ssucursal, 3, '0') || 'L' || LPAD(b.uorden, 6, '0') "+
							" 		else RPAD(b.ssucursal, 3, '0') || LPAD(b.uorden, 7, '0') "+
							" 	end as claveLabcore "+
							" from "+
							" 	eventos.t_orden a, "+
							" 	public.t_orden_sucursal b "+
							" where 	 "+
							" 	a.korden=?1 "+
							" 	and a.kevento=?2 "+
							" 	and a.kordensucursal  is not null "+
							" 	and a.benviadolabcore=true "+
							" 	and b.kordensucursal=a.kordensucursal");
			q.setParameter(1, korden);
			q.setParameter(2, KEVENTO_AMAZON);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] r : results) {
				salida =((BigDecimal) r[0]).toString()+":" +(String) r[1];						
			}
			results.clear();
		} catch (Exception e) {
			this.logger.error("Error en getOrdenLabcoreAmazon: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}
	
	/* Método para obtener la información del reporte de Amazon */
	public ReporteAmazon getDatosReporteAmazon(Long korden) {
		ReporteAmazon salida=null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	a.snombre||' '||a.sapellidopaterno||' '||a.sapellidomaterno  as paciente, "+
							" 	extract( year from age(trunc(a.dreg),a.dnacimiento)) as edad, "+
							" 	b.stipo as tipo,	 "+
							" 	to_char(c.dreg, 'dd/MM/yyyy') as fechaToma, "+
							" 	d.snombre||' '||d.sapellidopaterno||' '||d.sapellidomaterno  as medico, "+
							" 	e.snum_cedula as cedula, "+
							" 	e.sfirma as firma, "+
							" 	c.sdiagnostico, "+
							" 	c.sresultado  "+
							" from "+
							" 	eventos.t_orden a, "+
							" 	eventos.t_orden_detalle_amz b, "+
							" 	eventos.t_amz_cuestionario c, "+
							" 	portales.c_users d, "+
							" 	eventos.c_firmas_amz e "+
							" where  "+
							" 	a.korden=?1 "+
							" 	and b.korden=a.korden  "+
							" 	and c.korden=b.korden  "+
							" 	and d.login =c.user_reg  "+
							" 	and e.kuser(+)=d.kuser ");
			q.setParameter(1, korden);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] r : results) {
				salida=new ReporteAmazon(
						(String) r[0], //nombre_paciente
						Double.valueOf(((Double) r[1]).doubleValue()).toString(),//edad_paciente
						(String) r[2],//tipo
						(String) r[3],//fecha_toma
						(String) r[4],//nombre_medico
						(String) r[5],//cedula_medico
						(String) r[6],//firmaBase64_medico
						(String) r[7],//diagnostico
						(String) r[8]//resultad
				);
			}
			results.clear();
		} catch (Exception e) {
			this.logger.error("Error en getOrdenLabcoreAmazon: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}
	
	
	/* Método para generar el Reporte de Resultados del Evento de Amazon */
	public String getReporteAmazon(ReporteAmazon reporte) {
		String salida=null;
		File tempFile=null;
		try {			
			//
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			LocalDate localDate = LocalDate.parse(reporte.getFecha_toma(), formatter);
			Locale spanishLocale=new Locale("es", "ES");
			String dateInSpanish=localDate.format(DateTimeFormatter.ofPattern("EEEE, dd MMMM ; yyyy",spanishLocale));
			dateInSpanish=dateInSpanish.replace(";", "del");
			// Generate Report
			JasperDesign etiquetaReport=JRXmlLoader.load(new File(System.getProperty("user.dir")+"/Reporte_Amazon.jrxml"));			
			Map<String,Object> param = new HashMap<String,Object>();
			param.put("nombre_paciente", reporte.getNombre_paciente());
			param.put("edad", reporte.getEdad_paciente());
			param.put("tipo", reporte.getTipo());
			param.put("fecha_toma",dateInSpanish);
			param.put("nombre_medico", reporte.getNombre_medico());
			param.put("cedula_medico", reporte.getCedula_medico());
			//param.put("img_base64", util_Base64.base64ToBytes(reporte.getFirmaBase64_medico()));
			param.put("img_base64", reporte.getFirmaBase64_medico());
			param.put("diagnostico", reporte.getDiagnostico());
			param.put("resultado", reporte.getResultado());		
			JasperReport jasperReport  = JasperCompileManager.compileReport(etiquetaReport);
			//JasperPrint jp=JasperFillManager.fillReport(jasperReport, param);
			JasperPrint jp=JasperFillManager.fillReport(jasperReport, param,new JREmptyDataSource());
			//Create tmp file
			tempFile=File.createTempFile("Reporte_Amz_", ".pdf");
			logger.debug("tempFile path : {}",tempFile.getAbsolutePath());
			JasperExportManager.exportReportToPdfFile(jp,tempFile.getAbsolutePath());
			salida=util_Base64.encodeFileToBase64(tempFile.getAbsolutePath());			
		} catch (Exception e) {
			logger.error("Error en método getReporteAmazon: {} ",e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		}
		return salida;
	}
	
	/* Método para validar el estatus de la orden AMZ */
	public Integer getEstatusAmz(Long korden) {
		Integer salida=null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	kestatamz "+
							" from "+
							" 	eventos.t_orden_detalle_amz "+
							" where "+
							" 	korden=?1");
			q.setParameter(1, korden);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object r : results) {
				//salida = (String) r;
				salida=((BigDecimal) r).intValue();
			}
			results.clear();
		} catch (Exception e) {
			this.logger.error("Error en getEstatusAmz: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}
	
	/* Método para obtener la información del reporte de Amazon */
	public ResultadoJasperAmazon getDatosJasperAmazon(Long korden) {
		ResultadoJasperAmazon salida=null;
		try {
			Query q = this.entityManager.createNativeQuery(
					" select "+
							" 	case "+
							" 		when length(b.uorden) <= 6 then RPAD(b.ssucursal, 3, '0') || 'L' || LPAD(b.uorden, 6, '0') "+
							" 		else RPAD(b.ssucursal, 3, '0') || LPAD(b.uorden, 7, '0') "+
							" 	end as claveLabcore, "+
							" 	a.snombre||' '||a.sapellidopaterno||' '||a.sapellidomaterno  as paciente, "+
							" 	cast('TO WHOM IT MAY CONCERN' as varchar) as doctor, "+
							" 	to_char(a.kordensucursal) as kordensucursal, "+
							" 	extract( year from age(trunc(a.dreg),a.dnacimiento)) as edad_paciente, "+
							" 	case "+
							" 		when a.bsexo=2 then 'FEMALE' "+
							" 		else 'MALE' "+
							" 	end as sexo, "+
							" 	case	 "+
							" 		when d.dreg_saliva2  is not null then to_char(d.dreg_saliva2, 'MM/dd/yyyy HH24:MI:SS') "+
							" 		when d.dreg_saliva is not null then to_char(d.dreg_saliva, 'MM/dd/yyyy HH24:MI:SS') "+
							" 		else  '' "+
							" 	end as fecha_saliva, "+
							" 	case "+
							" 		when d.dreg_orina is not null then Cast(Case When d.bres_sal_mpa Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 		else Cast(Case When d.bres_sal_mpa2 Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 	end as res_sal_amp, "+
							" 	case  "+
							" 		when d.dreg_orina is not null then Cast(Case When d.bres_sal_bar Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 		else Cast(Case When d.bres_sal_bar2 Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 	end as res_sal_bar, "+
							" 	case  "+
							" 		when d.dreg_orina is not null then Cast(Case When d.bres_sal_bzd Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 		else Cast(Case When d.bres_sal_bzd2 Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 	end as res_sal_bzd, "+
							" 	case  "+
							" 		when d.dreg_orina is not null then Cast(Case When d.bres_sal_thc Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 		else Cast(Case When d.bres_sal_thc2 Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 	end as res_sal_thc, "+
							" 	case  "+
							" 		when d.dreg_orina is not null then Cast(Case When d.bres_sal_coc Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 		else Cast(Case When d.bres_sal_coc2 Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 	end as res_sal_coc, "+
							" 	case  "+
							" 		when d.dreg_orina is not null then Cast(Case When d.bres_sal_met Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 		else Cast(Case When d.bres_sal_met2 Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) "+
							" 	end as res_sal_met, "+
							" 	to_char(d.dreg_orina, 'MM/dd/yyyy HH24:MI:SS') as f_orina, "+
							" 	Cast(Case When d.bres_orina_mpa Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) as res_orina_mpa, "+
							" 	Cast(Case When d.bres_orina_bar Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) as res_orina_bar, "+
							" 	Cast(Case When d.bres_orina_bzd Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) as res_orina_bzd, "+
							" 	Cast(Case When d.bres_orina_thc Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) as res_orina_thc, "+
							" 	Cast(Case When d.bres_orina_coc Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) as res_orina_coc, "+
							" 	Cast(Case When d.bres_orina_met Then 'POSITIVE' ELse 'NEGATIVE' END AS Varchar) as res_orina_met  "+
							" from "+
							" 	eventos.t_orden a, "+
							" 	public.t_orden_sucursal b, "+
							" 	eventos.t_orden_detalle_amz c, "+
							" 	eventos.t_amz_toxicologico d "+
							" where  "+
							" 	a.korden=?1 "+
							" 	and a.kevento=?2 "+
							" 	and a.cestatus=3 "+
							" 	and b.kordensucursal=a.kordensucursal "+
							" 	and c.korden=a.korden  "+
							" 	and c.kestatamz in (6,7) "+
							" 	and d.korden=c.korden ");
			q.setParameter(1, korden);
			q.setParameter(2, KEVENTO_AMAZON);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] r : results) {
				salida=new ResultadoJasperAmazon(
						(String) r[0], //claveLabcore
						(String) r[1], //paciente
						(String) r[2], //doctor
						(String) r[3], //kordensucursal
						Double.valueOf(((Double) r[4]).doubleValue()).toString(),//edad_paciente
						(String) r[5],//sexo
						(String) r[6],//fecha_saliva
						(String) r[7],//res_sal_amp
						(String) r[8],//res_sal_bar
						(String) r[9],//res_sal_bzd
						(String) r[10],//res_sal_thc
						(String) r[11],//res_sal_coc
						(String) r[12],//res_sal_met
						(String) r[13],//fecha_orina
						(String) r[14],//res_orina_amp
						(String) r[15],//res_orina_bar
						(String) r[16],//res_orina_bzd
						(String) r[17],//res_orina_thc
						(String) r[18],//res_orina_coc
						(String) r[19]//res_orina_met
				);
			}
			results.clear();
		} catch (Exception e) {
			this.logger.error("Error en getOrdenLabcoreAmazon: {}", e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		} finally {
			this.entityManager.close();
		}
		return salida;
	}
	
	/* Método para generar el Reporte de Resultados del Evento de Amazon */
	public String getReporteSalivaAmazon(ResultadoJasperAmazon reporte) {
		String salida=null;
		File tempFile=null;
		try {			
			//
			String pattern = "MM/dd/yyyy";
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
			String actualDate = simpleDateFormat.format(new Date());
			// Generate Report
			JasperDesign salivaReport=JRXmlLoader.load(new File(System.getProperty("user.dir")+"/Saliva_drug_test.jrxml"));			
			Map<String,Object> param = new HashMap<String,Object>();
			param.put("ordenLabcore", reporte.getOrdenLabcore());
			param.put("paciente", reporte.getPaciente());
			param.put("doctor", reporte.getDoctor());
			param.put("kordensucursal",reporte.getKordensucursal());
			param.put("edad",reporte.getEdad_paciente());
			param.put("sexo", reporte.getSexo());
			param.put("fechaEmision",actualDate );
			param.put("resul_AMP", reporte.getRes_sal_amp());
			param.put("resul_BAR", reporte.getRes_sal_bar());
			param.put("resul_BZD", reporte.getRes_sal_bzd());
			param.put("resul_THC", reporte.getRes_sal_thc());
			param.put("resul_COC", reporte.getRes_sal_coc());
			param.put("resul_MET", reporte.getRes_sal_met());
			param.put("fecha_liberacion", reporte.getFecha_saliva());
			param.put("path_firma", System.getProperty("user.dir")+"/Firma.png");
			param.put("path_gda", System.getProperty("user.dir")+"/GDA_white.png");
			param.put("path_frase", System.getProperty("user.dir")+"/FraseOlab.png");
			param.put("path_logo", System.getProperty("user.dir")+"/Olab.png");
			JasperReport jasperReport  = JasperCompileManager.compileReport(salivaReport);
			//JasperPrint jp=JasperFillManager.fillReport(jasperReport, param);
			JasperPrint jp=JasperFillManager.fillReport(jasperReport, param,new JREmptyDataSource());
			//Create tmp file
			tempFile=File.createTempFile("Reporte_Amz_", ".pdf");
			logger.debug("tempFile path : {}",tempFile.getAbsolutePath());
			JasperExportManager.exportReportToPdfFile(jp,tempFile.getAbsolutePath());			
			salida=util_Base64.encodeFileToBase64(tempFile.getAbsolutePath());			
		} catch (Exception e) {
			logger.error("Error en método getReporteAmazon: {} ",e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		}finally {
			if(tempFile!=null) {
				tempFile.delete();
			}
		}
		return salida;
	}
	
	/* Método para generar el Reporte de Resultados del Evento de Amazon */
	public String getReporteOrinaAmazon(ResultadoJasperAmazon reporte) {
		String salida=null;
		File tempFile=null;
		try {			
			//
			String pattern = "MM/dd/yyyy";
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
			String actualDate = simpleDateFormat.format(new Date());
			// Generate Report
			JasperDesign orinaReport=JRXmlLoader.load(new File(System.getProperty("user.dir")+"/Urine_drug_test.jrxml"));			
			Map<String,Object> param = new HashMap<String,Object>();
			param.put("ordenLabcore", reporte.getOrdenLabcore());
			param.put("paciente", reporte.getPaciente());
			param.put("doctor", reporte.getDoctor());
			param.put("kordensucursal",reporte.getKordensucursal());
			param.put("edad",reporte.getEdad_paciente());
			param.put("sexo", reporte.getSexo());
			param.put("fechaEmision",actualDate );
			param.put("resul_AMP", reporte.getRes_orina_amp());
			param.put("resul_BAR", reporte.getRes_orina_bar());
			param.put("resul_BZD", reporte.getRes_orina_bzd());
			param.put("resul_THC", reporte.getRes_orina_thc());
			param.put("resul_COC", reporte.getRes_orina_coc());
			param.put("resul_MET", reporte.getRes_orina_met());
			param.put("fecha_liberacion", reporte.getFecha_orina());
			param.put("path_firma", System.getProperty("user.dir")+"/Firma.png");
			param.put("path_gda", System.getProperty("user.dir")+"/GDA_white.png");
			param.put("path_frase", System.getProperty("user.dir")+"/FraseOlab.png");
			param.put("path_logo", System.getProperty("user.dir")+"/Olab.png");
			JasperReport jasperReport  = JasperCompileManager.compileReport(orinaReport);
			//JasperPrint jp=JasperFillManager.fillReport(jasperReport, param);
			JasperPrint jp=JasperFillManager.fillReport(jasperReport, param,new JREmptyDataSource());
			//Create tmp file
			tempFile=File.createTempFile("Reporte_Amz_", ".pdf");
			logger.debug("tempFile path : {}",tempFile.getAbsolutePath());
			JasperExportManager.exportReportToPdfFile(jp,tempFile.getAbsolutePath());	
			salida=util_Base64.encodeFileToBase64(tempFile.getAbsolutePath());			
		} catch (Exception e) {
			logger.error("Error en método getReporteAmazon: {} ",e.getMessage());
			throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());
		}finally {
			if(tempFile!=null) {
				tempFile.delete();
			}
		}
		return salida;
	}
}